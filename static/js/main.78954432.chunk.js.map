{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","components/Button.jsx","index.js"],"names":["module","exports","App","className","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","STYLES","SIZES","Button","children","type","onClick","buttonStyle","buttonSize","checkButtonStyle","includes","checkButtonSize","getMinV","data","reduce","min","b","Math","value","getMaxV","max","getMaxTime","time","filter_max_tiempo","filter","data_","map","filteredPerson","ReactDOM","render","StrictMode","document","getElementById","socket","io","path","transports","disconnect","Websocket","useState","setData_exchanges","setData_stocks","data_update","setData_update","data_buy","setData_buy","data_sell","setData_sell","useEffect","emit","on","exchanges","currentData_exchanges","stocks","currentData_stocks","update","currentData_update","buy","currentData_buy","sell","currentData_sell","buttonText","setButtonText","data_va","conexionText","setconexionText","con","grouped_data_update","_","grouped_data_buy","grouped_data_sell","Object","entries","key","ticker","connected","alert","sell_volume","key_sell","value_sell","prev","next","volume","buy_volume","key_buy","value_buy","width","height","dataKey","tick","stroke","strokeDasharray","connect","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.78954432.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport \"./button.css\";\r\n\r\nconst STYLES = [\r\n  \"btn--primary--solid\",\r\n  \"btn--warning--solid\",\r\n  \"btn--danger--solid\",\r\n  \"btn--succes--solid\",\r\n  \"btn--primary--outline\",\r\n  \"btn--warning--outline\",\r\n  \"btn--danger--outline\",\r\n  \"btn--succes--outline\",\r\n]\r\n\r\nconst SIZES = [\"btn--medium\", \"btn--small\"];\r\n\r\nexport const Button = ({\r\n  children,\r\n  type,\r\n  onClick,\r\n  buttonStyle,\r\n  buttonSize\r\n}) => {\r\n\r\n  const checkButtonStyle = STYLES.includes(buttonStyle)\r\n  ? buttonStyle\r\n  : STYLES[0];\r\n\r\n  const checkButtonSize = SIZES.includes(buttonSize)\r\n  ? buttonSize\r\n  : SIZES[0];\r\n\r\n\r\n\r\n  return (\r\n    <button\r\n      className={`btn ${checkButtonStyle} ${checkButtonSize} `}\r\n      onClick = {onClick}\r\n      type={type}\r\n     >\r\n      {children}\r\n    </button>\r\n  )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport io from 'socket.io-client';\nimport Chart from \"react-google-charts\";\nimport { useEffect, useState } from 'react';\nimport {Button} from './components/Button';\nimport * as _ from 'underscore';\nimport {\n  BarChart,\n  Bar,\n  Line,\n  LineChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  CartesianGrid\n} from 'recharts';\n\nReactDOM.render(\n  <React.StrictMode>\n  /<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// Funciones auxiliares\n// fuente: https://codeburst.io/javascript-finding-minimum-and-maximum-values-in-an-array-of-objects-329c5c7e22a2\nfunction getMinV(data){\n  return data.reduce((min, b) => Math.min(min, b.value), data[0].value);\n};\n\nfunction getMaxV(data){\n  return data.reduce((max, b) => Math.max(max, b.value), data[0].value);\n};\n\nfunction getMaxTime(data){\n  // ultimo valor recibido\n  return data.reduce((max, b) => Math.max(max, b.time), data[0].value);\n};\n\nfunction filter_max_tiempo(data, time){\n  return data.filter(data_ => data_.time == time).map(filteredPerson => (filteredPerson.value))[0];\n\n};\n\n// funcion para calcular el volumen total de una accion\n\n\n\n// socket\nconst socket = io(\"wss://le-18262636.bitzonte.com\",{path: '/stocks'}, {transports: 'websocket'});\nsocket.disconnect();\n\n\n\n\nconst Websocket = ({}) => {\n\n/* Read\n\nhttps://css-tricks.com/use-button-element/\n*/\n\n  // eventos recibidos por el servidor:\n  // fuente : https://github.com/codyseibert/youtube/tree/master/realtime-chart-websockets\n  const [data_exchanges, setData_exchanges] = useState([]);\n  const [data_stocks, setData_stocks] = useState([]);\n  // eventos emitidos por el servidor\n  const [data_update, setData_update] = useState([]);\n  const [data_buy, setData_buy] = useState([]);\n  const [data_sell, setData_sell] = useState([]);\n\n\n  // 1. listen for an event and update the state\n  useEffect(() => {\n    socket.emit('EXCHANGES');\n    socket.on('EXCHANGES', exchanges => {\n      setData_exchanges(currentData_exchanges => [...currentData_exchanges, exchanges]);\n    });\n    socket.emit('STOCKS');\n    socket.on('STOCKS', stocks => {\n      setData_stocks(currentData_stocks => [...currentData_stocks, stocks]);\n    });\n    // eventos emitidos por el servidor\n    socket.on('UPDATE', update => {\n      setData_update(currentData_update => [...currentData_update, update]);\n    });\n\n    socket.on('BUY', buy => {\n      setData_buy(currentData_buy => [...currentData_buy, buy]);\n    });\n\n    socket.on('SELL', sell => {\n      setData_sell(currentData_sell => [...currentData_sell, sell]);\n    });\n\n  }, []);\n\n  /// cambiar\n  function vol_transado_1(nombre_ticker){\n    var grouped_data_buy = _.mapObject(_.groupBy(data_buy, 'ticker'),\n                            );\n    var grouped_data_sell = _.mapObject(_.groupBy(data_sell, 'ticker'),\n                                                    );\n    const data_ticker_sell = grouped_data_sell[nombre_ticker];\n    const data_ticker_buy = grouped_data_buy[nombre_ticker] ;\n\n    //const total = data_ticker_sell.reduce((prev,next) => prev + next.volume,0);\n    //return data_ticker_sell;\n    //var tot = 0;\n    //data_ticker_sell.map(se => tot += se.value);\n\n\n\n\n    //return data_ticker_sell;\n    //return grouped_data_buy;\n    //return grouped_data_buy.filter(data_ => data_.time == time).map(filteredPerson => (filteredPerson.value))[0];\n  };\n\n  // cambiar\n\n\n\n  //updates\n  //var keys_updates = Object.keys(data_update);\n  const [buttonText, setButtonText] = useState(\"Conectarse\");\n  const holi = <h1> {data_update.map(data_va => <div>{data_va.value}</div>)}</h1>\n  const [conexionText, setconexionText] = useState(\"Estás desconectado!\");\n  const con = <h2> {conexionText} </h2>\n  // fuente: https://www.it-swarm.dev/es/javascript/como-agrupar-una-matriz-de-objetos-por-clave./829087301/\n  const aux = \"\";\n  var grouped_data_update = _.mapObject(_.groupBy(data_update, 'ticker'),\n                          );\n\n  var grouped_data_buy = _.mapObject(_.groupBy(data_buy, 'ticker'),);\n\n  var grouped_data_sell = _.mapObject(_.groupBy(data_sell, 'ticker'),);\n\n\n  // ocnstante de prueba\n  const sell_2 = Object.entries(grouped_data_sell).map(([key,value])=>{\n                          return (\n                              <div>{key} : {value.map(data_ => <h1> {data_.ticker} </h1>) }</div>\n                          );\n                        });\n// prueba\n  const petList_2 = Object.entries(grouped_data_buy).map(([key,value])=>{\n                          return (\n                              <div>{key} : {value.map(data_ => <h1> {data_.ticker} </h1>) }</div>\n                          );\n                        });\n\n  // prueba\n  const petList = Object.entries(grouped_data_update).map(([key,value])=>{\n                          return (\n                              <div>{key} : {value.map(data_ => <h1> {data_.ticker} </h1>) }</div>\n                          );\n                        });\n\n\n  if (socket.connected){\n    return (\n      <div>\n      {con}\n        <Button onClick={() =>\n          //alert(\"Conectar al socket\");\n          {alert(\"Desconectarse\"); socket.disconnect();setButtonText(\"Conectarse\");setconexionText(\"Estás desconectado!\")}\n        }> {buttonText} </Button>\n\n        <h1> Tarea 3 Websocket </h1>\n        {Object.entries(grouped_data_update).map(([key,value])=>{\n          const holaa = \"hhh\";\n          const sell_volume = Object.entries(grouped_data_sell).map(([key_sell,value_sell])=>{\n                                  if (key_sell == key){\n                                  return (value_sell.reduce((prev,next) => prev + next.volume,0));\n                                  }\n                                });\n          const buy_volume = Object.entries(grouped_data_buy).map(([key_buy,value_buy])=>{\n                                  if (key_buy == key){\n                                  return (value_buy.reduce((prev,next) => prev + next.volume,0));\n                                                        }\n                                                      });\n          //const total_volumen = buy_volume + sell_volume;\n          //const [total_volume, setData_total_volume] = useState(buy_volume+sell_volume);\n\n          //const data_ticker_sell = grouped_data_sell[key];\n          //const sell_total = data_ticker_sell.reduce((prev,next) => prev + next.volume,0);\n          //setData_total_volume(buy_volume,sell_volume);\n\n\n                                return (\n\n                                    <div>\n                                      <h2> Acción: {key} </h2>\n                                      <h3> Volumen Total BUY: {buy_volume}</h3>\n                                      <h3> Volumen Total SELL: {sell_volume}</h3>\n                                      <h3> Alto Histórico: {getMaxV(value)}</h3>\n                                      <h3> Bajo Histórico: {getMinV(value)}</h3>\n                                      <h3> Último precio: {filter_max_tiempo(value, getMaxTime(value))} </h3>\n                                      <h3> Variación Porcentual: </h3>\n                                      <LineChart width={600} height={300} data={value}>\n                                        <XAxis dataKey=\"time\" tick={aux} />\n                                        <YAxis />\n                                        <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\"/>\n                                        <Line dataKey=\"value\" stroke=\"#E446B6\" />\n                                        <Tooltip/>\n                                        <Legend />\n                                      </LineChart>\n\n\n                                    </div>\n                                );\n                              })}\n\n      </div>\n    );\n  }\n  else{\n    return (\n      <div>\n      {con}\n        <Button onClick={() =>\n          //alert(\"Conectar al socket\");\n          {alert(\"Conectarse\"); socket.connect(); setButtonText(\"Desconectarse\");setconexionText(\"Estás conectado!\")}\n        }> {buttonText}</Button>\n        <h1>Tarea 3 Websocket </h1>\n        {Object.entries(grouped_data_update).map(([key,value])=>{\n                                return (\n                                    <div>\n                                      <h2> Acción: {key} </h2>\n                                      <h3> Volumen Total Transado: </h3>\n                                      <h3> Alto Histórico: {getMaxV(value)}</h3>\n                                      <h3> Bajo Histórico: {getMinV(value)}</h3>\n                                      <h3> Último precio: {filter_max_tiempo(value, getMaxTime(value))} </h3>\n                                      <h3> Variación Porcentual: </h3>\n                                      <LineChart width={600} height={300} data={value}>\n                                        <XAxis dataKey=\"time\" tick={aux} />\n                                        <YAxis />\n                                        <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\"/>\n                                        <Line dataKey=\"value\" />\n                                        <Tooltip/>\n                                      </LineChart>\n\n\n                                    </div>\n                                );\n                              })}\n\n\n      </div>\n\n  );\n\n\n  }\n\n};\n\n\nReactDOM.render(<Websocket/>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}